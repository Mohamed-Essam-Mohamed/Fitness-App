// Mocks generated by Mockito 5.4.5 from annotations
// in fitness_app/test/feature/auth/presentation/widgets/login_content_widget_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i5;

import 'package:fitness_app/feature/auth/presentation/view_model/login/login_cubit.dart'
    as _i4;
import 'package:fitness_app/feature/auth/presentation/view_model/login/login_state.dart'
    as _i3;
import 'package:flutter/material.dart' as _i1;
import 'package:flutter_bloc/flutter_bloc.dart' as _i6;
import 'package:mockito/mockito.dart' as _i2;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeGlobalKey_0<T extends _i1.State<_i1.StatefulWidget>>
    extends _i2.SmartFake
    implements _i1.GlobalKey<T> {
  _FakeGlobalKey_0(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeTextEditingController_1 extends _i2.SmartFake
    implements _i1.TextEditingController {
  _FakeTextEditingController_1(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeLoginState_2 extends _i2.SmartFake implements _i3.LoginState {
  _FakeLoginState_2(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

/// A class which mocks [LoginCubit].
///
/// See the documentation for Mockito's code generation for more information.
class MockLoginCubit extends _i2.Mock implements _i4.LoginCubit {
  MockLoginCubit() {
    _i2.throwOnMissingStub(this);
  }

  @override
  _i1.GlobalKey<_i1.FormState> get formKey =>
      (super.noSuchMethod(
            Invocation.getter(#formKey),
            returnValue: _FakeGlobalKey_0<_i1.FormState>(
              this,
              Invocation.getter(#formKey),
            ),
          )
          as _i1.GlobalKey<_i1.FormState>);

  @override
  _i1.TextEditingController get emailController =>
      (super.noSuchMethod(
            Invocation.getter(#emailController),
            returnValue: _FakeTextEditingController_1(
              this,
              Invocation.getter(#emailController),
            ),
          )
          as _i1.TextEditingController);

  @override
  _i1.TextEditingController get passwordController =>
      (super.noSuchMethod(
            Invocation.getter(#passwordController),
            returnValue: _FakeTextEditingController_1(
              this,
              Invocation.getter(#passwordController),
            ),
          )
          as _i1.TextEditingController);

  @override
  _i3.LoginState get state =>
      (super.noSuchMethod(
            Invocation.getter(#state),
            returnValue: _FakeLoginState_2(this, Invocation.getter(#state)),
          )
          as _i3.LoginState);

  @override
  _i5.Stream<_i3.LoginState> get stream =>
      (super.noSuchMethod(
            Invocation.getter(#stream),
            returnValue: _i5.Stream<_i3.LoginState>.empty(),
          )
          as _i5.Stream<_i3.LoginState>);

  @override
  bool get isClosed =>
      (super.noSuchMethod(Invocation.getter(#isClosed), returnValue: false)
          as bool);

  @override
  void doIntent(_i3.LoginAction? action) => super.noSuchMethod(
    Invocation.method(#doIntent, [action]),
    returnValueForMissingStub: null,
  );

  @override
  _i5.Future<void> close() =>
      (super.noSuchMethod(
            Invocation.method(#close, []),
            returnValue: _i5.Future<void>.value(),
            returnValueForMissingStub: _i5.Future<void>.value(),
          )
          as _i5.Future<void>);

  @override
  void emit(_i3.LoginState? state) => super.noSuchMethod(
    Invocation.method(#emit, [state]),
    returnValueForMissingStub: null,
  );

  @override
  void onChange(_i6.Change<_i3.LoginState>? change) => super.noSuchMethod(
    Invocation.method(#onChange, [change]),
    returnValueForMissingStub: null,
  );

  @override
  void addError(Object? error, [StackTrace? stackTrace]) => super.noSuchMethod(
    Invocation.method(#addError, [error, stackTrace]),
    returnValueForMissingStub: null,
  );

  @override
  void onError(Object? error, StackTrace? stackTrace) => super.noSuchMethod(
    Invocation.method(#onError, [error, stackTrace]),
    returnValueForMissingStub: null,
  );
}
